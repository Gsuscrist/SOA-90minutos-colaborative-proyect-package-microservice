version: 0.2

env:
  variables:
    RABBITMQ_HOST: "b-42d44877-0365-461e-ac90-9aa334229a4c.mq.us-east-2.amazonaws.com"
    RABBITMQ_PROTOCOL: "amqps"
    RABBITMQ_USER: "package"
    RABBITMQ_PASS: "9Ik937aWFENX"
    RABBITMQ_PORT: "5671"
    RABBIT_EXCHANGE_ADMINISTRATION: "administration_90_minutes"
    RABBIT_EXCHANGE_USER: "user_90_minutes"
    RABBIT_QUEUE_GET_ALL_PACKAGES_REQ_ADMINISTRATION: "get_all_packages_req_administration"
    RABBIT_QUEUE_GET_ALL_PACKAGES_RES_ADMINISTRATION: "get_all_packages_res_administration"
    RABBIT_QUEUE_GET_ALL_PACKAGE_RATING_REQ_ADMINISTRATION: "get_all_package_rating_req_administration"
    RABBIT_QUEUE_GET_ALL_PACKAGE_RATING_RES_ADMINISTRATION: "get_all_package_rating_res_administration"
    RABBIT_QUEUE_GET_ALL_PACKAGE_COMMENT_REQ_ADMINISTRATION: "get_all_package_comment_req_administration"
    RABBIT_QUEUE_GET_ALL_PACKAGE_COMMENT_RES_ADMINISTRATION: "get_all_package_comment_res_administration"
    RABBIT_QUEUE_PAYMENT_PACKAGE_RECEIVE_NOTIFICATION: "payment_package_receive_notification_administration"
    RABBIT_QUEUE_CHECK_USER_DISCOUNT_REQ: "check_user_discount_req_user"
    RABBIT_QUEUE_CHECK_USER_DISCOUNT_RES: "check_user_discount_res_user"
    RABBIT_ROUTING_KEY_GET_ALL_PACKAGES_REQ_ADMINISTRATION: "get_all_packages_req.administration"
    RABBIT_ROUTING_KEY_GET_ALL_PACKAGES_RES_ADMINISTRATION: "get_all_packages_res.administration"
    RABBIT_ROUTING_KEY_GET_ALL_PACKAGE_RATING_REQ_ADMINISTRATION: "get_all_package_rating_req.administration"
    RABBIT_ROUTING_KEY_GET_ALL_PACKAGE_RATING_RES_ADMINISTRATION: "get_all_package_rating_res.administration"
    RABBIT_ROUTING_KEY_GET_ALL_PACKAGE_COMMENT_REQ_ADMINISTRATION: "get_all_package_comment_req.administration"
    RABBIT_ROUTING_KEY_GET_ALL_PACKAGE_COMMENT_RES_ADMINISTRATION: "get_all_package_comment_res.administration"
    RABBIT_ROUTING_KEY_PAYMENT_PACKAGE_RECEIVE_NOTIFICATION: "payment_package_receive_notification.administration"
    RABBIT_ROUTING_KEY_CHECK_USER_DISCOUNT_RES: "check_user_discount_res.user"
    RABBIT_ROUTING_KEY_CHECK_USER_DISCOUNT_REQ: "check_user_discount_req.user"

phases:
  install:
    runtime-versions:
      nodejs: latest
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      - echo log in to Amazon ECR...
      - aws --version
      - echo $AWS_DEFAULT_REGION
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 471112887179.dkr.ecr.us-east-2.amazonaws.com
      - REPOSITORY_URI=471112887179.dkr.ecr.us-east-2.amazonaws.com/dev-package-service
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image.
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo write definitions file...
      # Give your container name
      - DOCKER_CONTAINER_NAME=dev-package-service
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files: imagedefinitions.json
